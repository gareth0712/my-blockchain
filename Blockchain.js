const Block = require('./Block');
const cryptoHash = require('./util/cryptoHash');

class Blockchain {
  constructor() {
    this.chain = [Block.genesis()];
  }

  addBlock({ data }) {
    const lastBlock = this.chain[this.chain.length - 1];
    const newBlock = Block.mineBlock({ lastBlock, data });
    this.chain.push(newBlock);
  }

  replaceChain(chain) {
    if (chain.length <= this.chain.length) {
      console.error('The incoming chain must be longer');
      return;
    }
    if (!Blockchain.isValidChain(chain)) {
      console.error('The incoming chain must be valid');
      return;
    }

    console.log('Replacing chain with', chain);
    this.chain = chain;
  }

  static isValidChain(chain) {
    // Check genesis block
    // Two objects can't be strictly equal since they are two different instances even though they are from the same class Block
    if (JSON.stringify(chain[0]) !== JSON.stringify(Block.genesis()))
      return false;
    // Check lastHash of each block matches the hash of the last block
    // Check `hash` property of each block actually matches the hash generated by the cryptoHash function
    // i = 1 to skip genesis block as we checked that already
    for (let i = 1; i < chain.length; i++) {
      const { timestamp, lastHash, hash, data, nonce, difficulty } = chain[i];

      if (lastHash !== chain[i - 1].hash) return false;
      if (cryptoHash(timestamp, data, lastHash, nonce, difficulty) !== hash)
        return false;
    }

    return true;
  }
}

module.exports = Blockchain;
